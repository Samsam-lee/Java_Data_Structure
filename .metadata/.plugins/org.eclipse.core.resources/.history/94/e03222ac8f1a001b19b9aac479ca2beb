package java_test;


class RawData {
	String m_stdId[] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
						"11", "12", "13", "14", "15", "16", "17", "18"};
	
	String m_stdName[] = { "박나래",	"이정재",	"정우성",	"김국진", "하춘하", "강호동",
			               "이수근",	"피오",	"공유",	"곽도원", "고은아", "규현",	
			               "전지현", "채연", "김청", "김수지", "전영록", "구창모"};
	
	double m_stdGrade[] = {15, 12, 11, 10, 9, 8, 7, 7, 7, 6, 6, 6, 6, 6, 5, 5, 4, 3};
	
	String m_stdGender[] = {"여", "남", "남", "남", "여", "남", "남", "남", "남",
							"남", "여", "남", "여", "여", "여", "여", "남", "남"};									
}

// 학생 정보 저장 클래스 (StdInfo 객체 한 개가 한 명 학생 나타냄)
class StdInfo {
	// 한 명 학생의 학번, 이름, 점수, 성별 저장
}

// Linked-List Version 리스트 
class MyList {
	// StdInfo getStdById(String argId) : List 내 argID 입력 값과 매칭되는 학생 객체(StdInfo) 반환
	//                                    매칭되는 학생이 없을 경우 Null 반환

	// StdInfo get(int argIndex) : List 내 argIndex 순서에 해당하는 StdInfo 객체 반환
	//                             index 값 유효성 검사 실시 [입력 값이 -1 이하 이거나, List 내 저장 데이터 값보다 클경우]

	// StdInfo remove(int argIndex) : List 내 argIndex 순서에 해당하는 StdInfo 객체를 List 내 삭제 후 해당 객체 반환
	//                                index 값 유효성 검사 실시 [입력 값이 -1 이하 이거나, List 내 저장 데이터 값보다 클경우]
	
	// void add(StdInfo argStdInfo) : List 제일 마지막에 argStdInfo 객체 삽입
	
	// int size() : 현 리스트 내 데이터 개수 반환
	
	// int sizeOfFemaleStd() : 현 리스트 내 여학생 명수 반환
	
	// int sizeOfMaleStd() : 현 리스트 내 남학생 명수 반환
}

// 조 편성 클래스
class GroupManager {
	int		m_numOfGroup;   // 생성할 그룹 수 : 사용자(CLI)로부터 입력
	MyList	rawDataList; 	// 학생 정보 객체(StdInfo)들을 저장하는 리스트
	// 멤버변수, 멤버메서드 추가 가능 : 예) 여학생 객체 저장 MyList 추가
	
	// 생성자
	GroupManager() {
		// rawDataList 리스트에 학생(StdInfo)객체 입력
		LoadData();
	}
	
	// 학생 정보 객체화 후 리스트에 저장
	void LoadData() {
		// RawData 클래스 멤버 변수의 자료들을
		// 각 StdInfo 객체로 생성 후 rawDataList 리스트에 추가 
			
		
		// 리스트 rawDataList에 입력 된 학생 정보 화면에 출력
		PrtStdList();
	}
	
	// rawDataList 내 학생 정보(StdInfo 객체)를 화면에 출력
	void PrtStdList() {
		// 화면 출력 포맷 : 이름, 학번, 성별, 점수 순으로 출력 (아래 참조)
		// 1) 박나래, 1, "여", 10
		// 2) 이정재, 2, "남", 10
	}
	
	// 랜덤으로 그룹을 생성하여 화면에 출력
	void GenerateGroup() {
		// 생성 그룹 개수  사용자로부터 입력

		// 아래 규칙을 적용하여 그룹 생성
		// 1) 남학생 중 성적 순으로 각 그룹에 랜덤하게 배정 :    
		//    예) 생성 그룹 : 3, 성적순으로 1~3위의 학생들을 랜덤하게 1, 2, 3조에 편성
		//    Math.Random() 메서드 이용 : 0~2 랜덤 값 생성 : (int)(Math.Random() * 3)
		// 2) 모든 남학생이 배정 될때까지 1) 반복
		// 3) 남학생 숫자가 생성 그룹 수와 맞아 떨어지지 않을 경우, 남은 학생들은 각 조별 총점이 낮은 순으로 배정
		//    예) 총 학생 수 : 9명, 생성 그룹 : 2, 8명까지 배정 후 조별 점수 총합 -> 1조 총점 : 80점, 2조 총점 : 90점
		//       -> 1조 학생들의 총 점수가 낮음으로 나머지 1명을  1조에 배정
		// 4) 여학생의 경우 1조부터 차례대로 Round Robin 방식으로 배정
        //    예) 생성 그룹 3, 여학생 수 5명 : 1, 2, 3, 1, 2조 순으로 배정
		
		
		// 조편성 결과 화면 출력
		// 출력 포맷은 시험지 참조
	}
}

public class LinkedList {
	public static void main(String args[]) {
		GroupManager myGrpMgr = new GroupManager();
		// 조 편성 프로그램 실행
		myGrpMgr.GenerateGroup();	
	}
}
